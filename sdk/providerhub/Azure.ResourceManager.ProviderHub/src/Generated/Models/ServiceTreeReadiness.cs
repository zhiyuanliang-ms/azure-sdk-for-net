// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The readiness. </summary>
    public readonly partial struct ServiceTreeReadiness : IEquatable<ServiceTreeReadiness>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceTreeReadiness"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceTreeReadiness(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClosingDownValue = "ClosingDown";
        private const string DeprecatedValue = "Deprecated";
        private const string GAValue = "GA";
        private const string InDevelopmentValue = "InDevelopment";
        private const string InternalOnlyValue = "InternalOnly";
        private const string PrivatePreviewValue = "PrivatePreview";
        private const string PublicPreviewValue = "PublicPreview";
        private const string RemovedFromARMValue = "RemovedFromARM";
        private const string RetiredValue = "Retired";

        /// <summary> ClosingDown. </summary>
        public static ServiceTreeReadiness ClosingDown { get; } = new ServiceTreeReadiness(ClosingDownValue);
        /// <summary> Deprecated. </summary>
        public static ServiceTreeReadiness Deprecated { get; } = new ServiceTreeReadiness(DeprecatedValue);
        /// <summary> GA. </summary>
        public static ServiceTreeReadiness GA { get; } = new ServiceTreeReadiness(GAValue);
        /// <summary> InDevelopment. </summary>
        public static ServiceTreeReadiness InDevelopment { get; } = new ServiceTreeReadiness(InDevelopmentValue);
        /// <summary> InternalOnly. </summary>
        public static ServiceTreeReadiness InternalOnly { get; } = new ServiceTreeReadiness(InternalOnlyValue);
        /// <summary> PrivatePreview. </summary>
        public static ServiceTreeReadiness PrivatePreview { get; } = new ServiceTreeReadiness(PrivatePreviewValue);
        /// <summary> PublicPreview. </summary>
        public static ServiceTreeReadiness PublicPreview { get; } = new ServiceTreeReadiness(PublicPreviewValue);
        /// <summary> RemovedFromARM. </summary>
        public static ServiceTreeReadiness RemovedFromARM { get; } = new ServiceTreeReadiness(RemovedFromARMValue);
        /// <summary> Retired. </summary>
        public static ServiceTreeReadiness Retired { get; } = new ServiceTreeReadiness(RetiredValue);
        /// <summary> Determines if two <see cref="ServiceTreeReadiness"/> values are the same. </summary>
        public static bool operator ==(ServiceTreeReadiness left, ServiceTreeReadiness right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceTreeReadiness"/> values are not the same. </summary>
        public static bool operator !=(ServiceTreeReadiness left, ServiceTreeReadiness right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ServiceTreeReadiness"/>. </summary>
        public static implicit operator ServiceTreeReadiness(string value) => new ServiceTreeReadiness(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceTreeReadiness other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceTreeReadiness other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
