// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The policy execution type. </summary>
    public readonly partial struct PolicyExecutionType : IEquatable<PolicyExecutionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PolicyExecutionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicyExecutionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string ExecutePoliciesValue = "ExecutePolicies";
        private const string BypassPoliciesValue = "BypassPolicies";
        private const string ExpectPartialPutRequestsValue = "ExpectPartialPutRequests";

        /// <summary> NotSpecified. </summary>
        public static PolicyExecutionType NotSpecified { get; } = new PolicyExecutionType(NotSpecifiedValue);
        /// <summary> ExecutePolicies. </summary>
        public static PolicyExecutionType ExecutePolicies { get; } = new PolicyExecutionType(ExecutePoliciesValue);
        /// <summary> BypassPolicies. </summary>
        public static PolicyExecutionType BypassPolicies { get; } = new PolicyExecutionType(BypassPoliciesValue);
        /// <summary> ExpectPartialPutRequests. </summary>
        public static PolicyExecutionType ExpectPartialPutRequests { get; } = new PolicyExecutionType(ExpectPartialPutRequestsValue);
        /// <summary> Determines if two <see cref="PolicyExecutionType"/> values are the same. </summary>
        public static bool operator ==(PolicyExecutionType left, PolicyExecutionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicyExecutionType"/> values are not the same. </summary>
        public static bool operator !=(PolicyExecutionType left, PolicyExecutionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PolicyExecutionType"/>. </summary>
        public static implicit operator PolicyExecutionType(string value) => new PolicyExecutionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicyExecutionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicyExecutionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
