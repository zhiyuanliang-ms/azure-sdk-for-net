// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The ProviderFrontloadPayloadProperties. </summary>
    public partial class ProviderFrontloadPayloadProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ProviderFrontloadPayloadProperties"/>. </summary>
        /// <param name="operationType"> The operation type. </param>
        /// <param name="providerNamespace"> The provider namespace. </param>
        /// <param name="frontloadLocation"> The frontload location. </param>
        /// <param name="copyFromLocation"> The copy from location. </param>
        /// <param name="environmentType"> The environment type. </param>
        /// <param name="serviceFeatureFlag"> The service feature flag. </param>
        /// <param name="includeResourceTypes"> The resource types to include. </param>
        /// <param name="excludeResourceTypes"> The resource types to exclude. </param>
        /// <param name="overrideManifestLevelFields"> The manifest level fields to override. </param>
        /// <param name="overrideEndpointLevelFields"> The endpoint level fields to override. </param>
        /// <param name="ignoreFields"> The fields to ignore. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationType"/>, <paramref name="providerNamespace"/>, <paramref name="frontloadLocation"/>, <paramref name="copyFromLocation"/>, <paramref name="includeResourceTypes"/>, <paramref name="excludeResourceTypes"/>, <paramref name="overrideManifestLevelFields"/>, <paramref name="overrideEndpointLevelFields"/> or <paramref name="ignoreFields"/> is null. </exception>
        public ProviderFrontloadPayloadProperties(string operationType, string providerNamespace, string frontloadLocation, string copyFromLocation, AvailableCheckInManifestEnvironment environmentType, ServiceFeatureFlagAction serviceFeatureFlag, IEnumerable<string> includeResourceTypes, IEnumerable<string> excludeResourceTypes, ManifestLevelPropertyBag overrideManifestLevelFields, ResourceTypeEndpointBase overrideEndpointLevelFields, IEnumerable<string> ignoreFields)
        {
            Argument.AssertNotNull(operationType, nameof(operationType));
            Argument.AssertNotNull(providerNamespace, nameof(providerNamespace));
            Argument.AssertNotNull(frontloadLocation, nameof(frontloadLocation));
            Argument.AssertNotNull(copyFromLocation, nameof(copyFromLocation));
            Argument.AssertNotNull(includeResourceTypes, nameof(includeResourceTypes));
            Argument.AssertNotNull(excludeResourceTypes, nameof(excludeResourceTypes));
            Argument.AssertNotNull(overrideManifestLevelFields, nameof(overrideManifestLevelFields));
            Argument.AssertNotNull(overrideEndpointLevelFields, nameof(overrideEndpointLevelFields));
            Argument.AssertNotNull(ignoreFields, nameof(ignoreFields));

            OperationType = operationType;
            ProviderNamespace = providerNamespace;
            FrontloadLocation = frontloadLocation;
            CopyFromLocation = copyFromLocation;
            EnvironmentType = environmentType;
            ServiceFeatureFlag = serviceFeatureFlag;
            IncludeResourceTypes = includeResourceTypes.ToList();
            ExcludeResourceTypes = excludeResourceTypes.ToList();
            OverrideManifestLevelFields = overrideManifestLevelFields;
            OverrideEndpointLevelFields = overrideEndpointLevelFields;
            IgnoreFields = ignoreFields.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ProviderFrontloadPayloadProperties"/>. </summary>
        /// <param name="operationType"> The operation type. </param>
        /// <param name="providerNamespace"> The provider namespace. </param>
        /// <param name="frontloadLocation"> The frontload location. </param>
        /// <param name="copyFromLocation"> The copy from location. </param>
        /// <param name="environmentType"> The environment type. </param>
        /// <param name="serviceFeatureFlag"> The service feature flag. </param>
        /// <param name="includeResourceTypes"> The resource types to include. </param>
        /// <param name="excludeResourceTypes"> The resource types to exclude. </param>
        /// <param name="overrideManifestLevelFields"> The manifest level fields to override. </param>
        /// <param name="overrideEndpointLevelFields"> The endpoint level fields to override. </param>
        /// <param name="ignoreFields"> The fields to ignore. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ProviderFrontloadPayloadProperties(string operationType, string providerNamespace, string frontloadLocation, string copyFromLocation, AvailableCheckInManifestEnvironment environmentType, ServiceFeatureFlagAction serviceFeatureFlag, IList<string> includeResourceTypes, IList<string> excludeResourceTypes, ManifestLevelPropertyBag overrideManifestLevelFields, ResourceTypeEndpointBase overrideEndpointLevelFields, IList<string> ignoreFields, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OperationType = operationType;
            ProviderNamespace = providerNamespace;
            FrontloadLocation = frontloadLocation;
            CopyFromLocation = copyFromLocation;
            EnvironmentType = environmentType;
            ServiceFeatureFlag = serviceFeatureFlag;
            IncludeResourceTypes = includeResourceTypes;
            ExcludeResourceTypes = excludeResourceTypes;
            OverrideManifestLevelFields = overrideManifestLevelFields;
            OverrideEndpointLevelFields = overrideEndpointLevelFields;
            IgnoreFields = ignoreFields;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ProviderFrontloadPayloadProperties"/> for deserialization. </summary>
        internal ProviderFrontloadPayloadProperties()
        {
        }

        /// <summary> The operation type. </summary>
        public string OperationType { get; }
        /// <summary> The provider namespace. </summary>
        public string ProviderNamespace { get; }
        /// <summary> The frontload location. </summary>
        public string FrontloadLocation { get; }
        /// <summary> The copy from location. </summary>
        public string CopyFromLocation { get; }
        /// <summary> The environment type. </summary>
        public AvailableCheckInManifestEnvironment EnvironmentType { get; }
        /// <summary> The service feature flag. </summary>
        public ServiceFeatureFlagAction ServiceFeatureFlag { get; }
        /// <summary> The resource types to include. </summary>
        public IList<string> IncludeResourceTypes { get; }
        /// <summary> The resource types to exclude. </summary>
        public IList<string> ExcludeResourceTypes { get; }
        /// <summary> The manifest level fields to override. </summary>
        internal ManifestLevelPropertyBag OverrideManifestLevelFields { get; }
        /// <summary> The resource hydration accounts. </summary>
        public IList<ResourceHydrationAccount> OverrideManifestLevelFieldsResourceHydrationAccounts
        {
            get => OverrideManifestLevelFields?.ResourceHydrationAccounts;
        }

        /// <summary> The endpoint level fields to override. </summary>
        public ResourceTypeEndpointBase OverrideEndpointLevelFields { get; }
        /// <summary> The fields to ignore. </summary>
        public IList<string> IgnoreFields { get; }
    }
}
