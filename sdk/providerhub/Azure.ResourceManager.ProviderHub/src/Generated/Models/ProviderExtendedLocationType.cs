// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The extended location type. </summary>
    public readonly partial struct ProviderExtendedLocationType : IEquatable<ProviderExtendedLocationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProviderExtendedLocationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProviderExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string CustomLocationValue = "CustomLocation";
        private const string EdgeZoneValue = "EdgeZone";
        private const string ArcZoneValue = "ArcZone";

        /// <summary> The extended location type is not specified. </summary>
        public static ProviderExtendedLocationType NotSpecified { get; } = new ProviderExtendedLocationType(NotSpecifiedValue);
        /// <summary> The extended location type is custom location. </summary>
        public static ProviderExtendedLocationType CustomLocation { get; } = new ProviderExtendedLocationType(CustomLocationValue);
        /// <summary> The extended location type is edge zone. </summary>
        public static ProviderExtendedLocationType EdgeZone { get; } = new ProviderExtendedLocationType(EdgeZoneValue);
        /// <summary> The extended location type is arc zone. </summary>
        public static ProviderExtendedLocationType ArcZone { get; } = new ProviderExtendedLocationType(ArcZoneValue);
        /// <summary> Determines if two <see cref="ProviderExtendedLocationType"/> values are the same. </summary>
        public static bool operator ==(ProviderExtendedLocationType left, ProviderExtendedLocationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProviderExtendedLocationType"/> values are not the same. </summary>
        public static bool operator !=(ProviderExtendedLocationType left, ProviderExtendedLocationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProviderExtendedLocationType"/>. </summary>
        public static implicit operator ProviderExtendedLocationType(string value) => new ProviderExtendedLocationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProviderExtendedLocationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProviderExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
