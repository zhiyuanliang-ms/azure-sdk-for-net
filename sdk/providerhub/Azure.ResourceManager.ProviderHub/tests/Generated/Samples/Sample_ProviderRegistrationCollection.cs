// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ProviderHub.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ProviderHub.Samples
{
    public partial class Sample_ProviderRegistrationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DirectProviderRegistrationsCreateOrUpdate()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/DirectProviderRegistrations_CreateOrUpdate.json
            // this example is just showing the usage of "ProviderRegistrations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation
            string providerNamespace = "Microsoft.Contoso";
            ProviderRegistrationData data = new ProviderRegistrationData
            {
                Properties = new ProviderRegistrationProperties
                {
                    Services = {new ResourceProviderService
{
ServiceName = "tags",
Status = ResourceProviderServiceStatus.Inactive,
}},
                    ServiceName = "root",
                    ProviderVersion = "2.0",
                    ProviderType = ResourceProviderType.Internal,
                    Management = new ResourceProviderManagement
                    {
                        IncidentRoutingService = "Contoso Resource Provider",
                        IncidentRoutingTeam = "Contoso Triage",
                        IncidentContactEmail = "helpme@contoso.com",
                        ServiceTreeInfos = {new ServiceTreeInfo
{
ServiceId = "d1b7d8ba-05e2-48e6-90d6-d781b99c6e69",
ComponentId = "d1b7d8ba-05e2-48e6-90d6-d781b99c6e69",
Readiness = ServiceTreeReadiness.InDevelopment,
}},
                    },
                    Capabilities = { new ResourceProviderCapabilities("CSP_2015-05-01", ResourceProviderCapabilitiesEffect.Allow), new ResourceProviderCapabilities("CSP_MG_2017-12-01", ResourceProviderCapabilitiesEffect.Allow) },
                    DstsConfiguration = new ProviderDstsConfiguration("prds-shim")
                    {
                        ServiceDnsName = "prds.sparta.azure.com",
                    },
                    NotificationOptions = ProviderNotificationOption.EmitSpendingLimit,
                    ResourceHydrationAccounts = {new ResourceHydrationAccount
{
AccountName = "classichydrationprodsn01",
SubscriptionId = "e4eae963-2d15-43e6-a097-98bd75b33edd",
}, new ResourceHydrationAccount
{
AccountName = "classichydrationprodch01",
SubscriptionId = "69e69ecb-e69c-41d4-99b8-87dd12781067",
}},
                    NotificationSubscriberSettings = {new SubscriberSetting
{
FilterRules = {new ProviderFilterRule
{
FilterQuery = "Resources | where event.eventType in ('Microsoft.Network/IpAddresses/write', 'Microsoft.KeyVault/vaults/move/action')",
EndpointInformation = {new ProviderEndpointInformation
{
Endpoint = "https://userrp.azure.com/arnnotify",
EndpointType = ProviderNotificationEndpointType.Webhook,
SchemaVersion = "3.0",
}, new ProviderEndpointInformation
{
Endpoint = "https://userrp.azure.com/arnnotify",
EndpointType = ProviderNotificationEndpointType.Eventhub,
SchemaVersion = "3.0",
}},
}},
}},
                    ManagementGroupGlobalNotificationEndpoints = {new ResourceProviderEndpoint
{
EndpointUri = new Uri("{your_management_group_notification_endpoint}"),
}},
                    OptionalFeatures = { "Microsoft.Resources/PlatformSubscription" },
                    ResourceGroupLockOptionDuringMoveBlockActionVerb = BlockActionVerb.Action,
                    ServiceClientOptionsType = ServiceClientOptionsType.DisableAutomaticDecompression,
                    LegacyNamespace = "legacyNamespace",
                    LegacyRegistrations = { "legacyRegistration" },
                    CustomManifestVersion = "2.0",
                },
                Kind = ProviderRegistrationKind.Direct,
            };
            ArmOperation<ProviderRegistrationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerNamespace, data);
            ProviderRegistrationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ProviderRegistrationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ProviderRegistrationsCreateOrUpdate()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/ProviderRegistrations_CreateOrUpdate.json
            // this example is just showing the usage of "ProviderRegistrations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation
            string providerNamespace = "Microsoft.Contoso";
            ProviderRegistrationData data = new ProviderRegistrationData
            {
                Properties = new ProviderRegistrationProperties
                {
                    Services = {new ResourceProviderService
{
ServiceName = "tags",
Status = ResourceProviderServiceStatus.Inactive,
}},
                    ServiceName = "root",
                    ProviderVersion = "2.0",
                    ProviderType = ResourceProviderType.Internal,
                    Management = new ResourceProviderManagement
                    {
                        IncidentRoutingService = "Contoso Resource Provider",
                        IncidentRoutingTeam = "Contoso Triage",
                        IncidentContactEmail = "helpme@contoso.com",
                        ServiceTreeInfos = {new ServiceTreeInfo
{
ServiceId = "d1b7d8ba-05e2-48e6-90d6-d781b99c6e69",
ComponentId = "d1b7d8ba-05e2-48e6-90d6-d781b99c6e69",
Readiness = ServiceTreeReadiness.InDevelopment,
}},
                        ExpeditedRolloutSubmitters = { "SPARTA-PlatformServiceOperator" },
                        ServerFailureResponseMessageType = ServerFailureResponseMessageType.OutageReporting,
                        ExpeditedRolloutMetadata = new ExpeditedRolloutMetadata
                        {
                            IsEnabled = false,
                            ExpeditedRolloutIntent = ExpeditedRolloutIntent.Hotfix,
                        },
                        CanaryManifestOwners = { "SPARTA-PlatformServiceAdmin" },
                        ProfitCenterCode = "P1234",
                        ProfitCenterProgramId = "1234",
                    },
                    Capabilities = { new ResourceProviderCapabilities("CSP_2015-05-01", ResourceProviderCapabilitiesEffect.Allow), new ResourceProviderCapabilities("CSP_MG_2017-12-01", ResourceProviderCapabilitiesEffect.Allow) },
                    CrossTenantTokenValidation = CrossTenantTokenValidation.EnsureSecureValidation,
                },
            };
            ArmOperation<ProviderRegistrationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerNamespace, data);
            ProviderRegistrationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ProviderRegistrationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ProviderRegistrationsGet()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/ProviderRegistrations_Get.json
            // this example is just showing the usage of "ProviderRegistrations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation
            string providerNamespace = "Microsoft.Contoso";
            ProviderRegistrationResource result = await collection.GetAsync(providerNamespace);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ProviderRegistrationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ProviderRegistrationsList()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/ProviderRegistrations_List.json
            // this example is just showing the usage of "ProviderRegistrations_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation and iterate over the result
            await foreach (ProviderRegistrationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ProviderRegistrationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ProviderRegistrationsGet()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/ProviderRegistrations_Get.json
            // this example is just showing the usage of "ProviderRegistrations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation
            string providerNamespace = "Microsoft.Contoso";
            bool result = await collection.ExistsAsync(providerNamespace);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ProviderRegistrationsGet()
        {
            // Generated from example definition: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/ProviderRegistrations_Get.json
            // this example is just showing the usage of "ProviderRegistrations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "ab7a8701-f7ef-471a-a2f4-d0ebbf494f77";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // get the collection of this ProviderRegistrationResource
            ProviderRegistrationCollection collection = subscriptionResource.GetProviderRegistrations();

            // invoke the operation
            string providerNamespace = "Microsoft.Contoso";
            NullableResponse<ProviderRegistrationResource> response = await collection.GetIfExistsAsync(providerNamespace);
            ProviderRegistrationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ProviderRegistrationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
