// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The preflight notifications. </summary>
    public readonly partial struct TemplateDeploymentPreflightNotification : IEquatable<TemplateDeploymentPreflightNotification>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TemplateDeploymentPreflightNotification"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TemplateDeploymentPreflightNotification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string UnregisteredSubscriptionsValue = "UnregisteredSubscriptions";

        /// <summary> None. </summary>
        public static TemplateDeploymentPreflightNotification None { get; } = new TemplateDeploymentPreflightNotification(NoneValue);
        /// <summary> UnregisteredSubscriptions. </summary>
        public static TemplateDeploymentPreflightNotification UnregisteredSubscriptions { get; } = new TemplateDeploymentPreflightNotification(UnregisteredSubscriptionsValue);
        /// <summary> Determines if two <see cref="TemplateDeploymentPreflightNotification"/> values are the same. </summary>
        public static bool operator ==(TemplateDeploymentPreflightNotification left, TemplateDeploymentPreflightNotification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TemplateDeploymentPreflightNotification"/> values are not the same. </summary>
        public static bool operator !=(TemplateDeploymentPreflightNotification left, TemplateDeploymentPreflightNotification right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TemplateDeploymentPreflightNotification"/>. </summary>
        public static implicit operator TemplateDeploymentPreflightNotification(string value) => new TemplateDeploymentPreflightNotification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TemplateDeploymentPreflightNotification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TemplateDeploymentPreflightNotification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
