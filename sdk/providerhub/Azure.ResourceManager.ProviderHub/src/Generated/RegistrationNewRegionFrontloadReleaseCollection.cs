// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ProviderHub.Models;

namespace Azure.ResourceManager.ProviderHub
{
    /// <summary>
    /// A class representing a collection of <see cref="RegistrationNewRegionFrontloadReleaseResource"/> and their operations.
    /// Each <see cref="RegistrationNewRegionFrontloadReleaseResource"/> in the collection will belong to the same instance of <see cref="ProviderRegistrationResource"/>.
    /// To get a <see cref="RegistrationNewRegionFrontloadReleaseCollection"/> instance call the GetRegistrationNewRegionFrontloadReleases method from an instance of <see cref="ProviderRegistrationResource"/>.
    /// </summary>
    public partial class RegistrationNewRegionFrontloadReleaseCollection : ArmCollection
    {
        private readonly ClientDiagnostics _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics;
        private readonly NewRegionFrontloadReleaseRestOperations _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient;

        /// <summary> Initializes a new instance of the <see cref="RegistrationNewRegionFrontloadReleaseCollection"/> class for mocking. </summary>
        protected RegistrationNewRegionFrontloadReleaseCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="RegistrationNewRegionFrontloadReleaseCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal RegistrationNewRegionFrontloadReleaseCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ProviderHub", RegistrationNewRegionFrontloadReleaseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(RegistrationNewRegionFrontloadReleaseResource.ResourceType, out string registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseApiVersion);
            _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient = new NewRegionFrontloadReleaseRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ProviderRegistrationResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ProviderRegistrationResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates a new region frontload release.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="properties"> The <see cref="ProviderFrontloadPayload"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> or <paramref name="properties"/> is null. </exception>
        public virtual async Task<ArmOperation<RegistrationNewRegionFrontloadReleaseResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string releaseName, ProviderFrontloadPayload properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));
            Argument.AssertNotNull(properties, nameof(properties));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.Name, releaseName, properties, cancellationToken).ConfigureAwait(false);
                var uri = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.Name, releaseName, properties);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new ProviderHubArmOperation<RegistrationNewRegionFrontloadReleaseResource>(Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a new region frontload release.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="properties"> The <see cref="ProviderFrontloadPayload"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> or <paramref name="properties"/> is null. </exception>
        public virtual ArmOperation<RegistrationNewRegionFrontloadReleaseResource> CreateOrUpdate(WaitUntil waitUntil, string releaseName, ProviderFrontloadPayload properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));
            Argument.AssertNotNull(properties, nameof(properties));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.CreateOrUpdate(Id.SubscriptionId, Id.Name, releaseName, properties, cancellationToken);
                var uri = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.Name, releaseName, properties);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new ProviderHubArmOperation<RegistrationNewRegionFrontloadReleaseResource>(Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a new region frontload release.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual async Task<Response<RegistrationNewRegionFrontloadReleaseResource>> GetAsync(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.Get");
            scope.Start();
            try
            {
                var response = await _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.GetAsync(Id.SubscriptionId, Id.Name, releaseName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a new region frontload release.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual Response<RegistrationNewRegionFrontloadReleaseResource> Get(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.Get");
            scope.Start();
            try
            {
                var response = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.Get(Id.SubscriptionId, Id.Name, releaseName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.Exists");
            scope.Start();
            try
            {
                var response = await _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.GetAsync(Id.SubscriptionId, Id.Name, releaseName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual Response<bool> Exists(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.Exists");
            scope.Start();
            try
            {
                var response = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.Get(Id.SubscriptionId, Id.Name, releaseName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual async Task<NullableResponse<RegistrationNewRegionFrontloadReleaseResource>> GetIfExistsAsync(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.GetAsync(Id.SubscriptionId, Id.Name, releaseName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<RegistrationNewRegionFrontloadReleaseResource>(response.GetRawResponse());
                return Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/newRegionFrontloadRelease/{releaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NewRegionFrontloadRelease_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="RegistrationNewRegionFrontloadReleaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="releaseName"> The name of the release. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseName"/> is null. </exception>
        public virtual NullableResponse<RegistrationNewRegionFrontloadReleaseResource> GetIfExists(string releaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(releaseName, nameof(releaseName));

            using var scope = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseClientDiagnostics.CreateScope("RegistrationNewRegionFrontloadReleaseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _registrationNewRegionFrontloadReleaseNewRegionFrontloadReleaseRestClient.Get(Id.SubscriptionId, Id.Name, releaseName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<RegistrationNewRegionFrontloadReleaseResource>(response.GetRawResponse());
                return Response.FromValue(new RegistrationNewRegionFrontloadReleaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
