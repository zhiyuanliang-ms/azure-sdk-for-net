// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.DeviceRegistry;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> The updatable properties of the NamespaceDiscoveredAsset. </summary>
    public partial class NamespaceDiscoveredAssetUpdateProperties : IJsonModel<NamespaceDiscoveredAssetUpdateProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<NamespaceDiscoveredAssetUpdateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NamespaceDiscoveredAssetUpdateProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(DeviceRef))
            {
                writer.WritePropertyName("deviceRef"u8);
                writer.WriteObjectValue(DeviceRef, options);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsCollectionDefined(AssetTypeRefs))
            {
                writer.WritePropertyName("assetTypeRefs"u8);
                writer.WriteStartArray();
                foreach (string item in AssetTypeRefs)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(DiscoveryId))
            {
                writer.WritePropertyName("discoveryId"u8);
                writer.WriteStringValue(DiscoveryId);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteNumberValue(Version.Value);
            }
            if (Optional.IsDefined(Manufacturer))
            {
                writer.WritePropertyName("manufacturer"u8);
                writer.WriteStringValue(Manufacturer);
            }
            if (Optional.IsDefined(ManufacturerUri))
            {
                writer.WritePropertyName("manufacturerUri"u8);
                writer.WriteStringValue(ManufacturerUri);
            }
            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Optional.IsDefined(ProductCode))
            {
                writer.WritePropertyName("productCode"u8);
                writer.WriteStringValue(ProductCode);
            }
            if (Optional.IsDefined(HardwareRevision))
            {
                writer.WritePropertyName("hardwareRevision"u8);
                writer.WriteStringValue(HardwareRevision);
            }
            if (Optional.IsDefined(SoftwareRevision))
            {
                writer.WritePropertyName("softwareRevision"u8);
                writer.WriteStringValue(SoftwareRevision);
            }
            if (Optional.IsDefined(DocumentationUri))
            {
                writer.WritePropertyName("documentationUri"u8);
                writer.WriteStringValue(DocumentationUri);
            }
            if (Optional.IsDefined(SerialNumber))
            {
                writer.WritePropertyName("serialNumber"u8);
                writer.WriteStringValue(SerialNumber);
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartObject();
                foreach (var item in Attributes)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(DefaultDatasetsConfiguration))
            {
                writer.WritePropertyName("defaultDatasetsConfiguration"u8);
                writer.WriteStringValue(DefaultDatasetsConfiguration);
            }
            if (Optional.IsDefined(DefaultEventsConfiguration))
            {
                writer.WritePropertyName("defaultEventsConfiguration"u8);
                writer.WriteStringValue(DefaultEventsConfiguration);
            }
            if (Optional.IsDefined(DefaultStreamsConfiguration))
            {
                writer.WritePropertyName("defaultStreamsConfiguration"u8);
                writer.WriteStringValue(DefaultStreamsConfiguration);
            }
            if (Optional.IsDefined(DefaultManagementGroupsConfiguration))
            {
                writer.WritePropertyName("defaultManagementGroupsConfiguration"u8);
                writer.WriteStringValue(DefaultManagementGroupsConfiguration);
            }
            if (Optional.IsCollectionDefined(DefaultDatasetsDestinations))
            {
                writer.WritePropertyName("defaultDatasetsDestinations"u8);
                writer.WriteStartArray();
                foreach (DatasetDestination item in DefaultDatasetsDestinations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DefaultEventsDestinations))
            {
                writer.WritePropertyName("defaultEventsDestinations"u8);
                writer.WriteStartArray();
                foreach (EventDestination item in DefaultEventsDestinations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DefaultStreamsDestinations))
            {
                writer.WritePropertyName("defaultStreamsDestinations"u8);
                writer.WriteStartArray();
                foreach (StreamDestination item in DefaultStreamsDestinations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Datasets))
            {
                writer.WritePropertyName("datasets"u8);
                writer.WriteStartArray();
                foreach (NamespaceDiscoveredDataset item in Datasets)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EventGroups))
            {
                writer.WritePropertyName("eventGroups"u8);
                writer.WriteStartArray();
                foreach (NamespaceDiscoveredEventGroup item in EventGroups)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Streams))
            {
                writer.WritePropertyName("streams"u8);
                writer.WriteStartArray();
                foreach (NamespaceDiscoveredStream item in Streams)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ManagementGroups))
            {
                writer.WritePropertyName("managementGroups"u8);
                writer.WriteStartArray();
                foreach (NamespaceDiscoveredManagementGroup item in ManagementGroups)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        NamespaceDiscoveredAssetUpdateProperties IJsonModel<NamespaceDiscoveredAssetUpdateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual NamespaceDiscoveredAssetUpdateProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NamespaceDiscoveredAssetUpdateProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNamespaceDiscoveredAssetUpdateProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static NamespaceDiscoveredAssetUpdateProperties DeserializeNamespaceDiscoveredAssetUpdateProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DeviceRef deviceRef = default;
            string displayName = default;
            IList<string> assetTypeRefs = default;
            string description = default;
            string discoveryId = default;
            long? version = default;
            string manufacturer = default;
            string manufacturerUri = default;
            string model = default;
            string productCode = default;
            string hardwareRevision = default;
            string softwareRevision = default;
            string documentationUri = default;
            string serialNumber = default;
            IDictionary<string, BinaryData> attributes = default;
            string defaultDatasetsConfiguration = default;
            string defaultEventsConfiguration = default;
            string defaultStreamsConfiguration = default;
            string defaultManagementGroupsConfiguration = default;
            IList<DatasetDestination> defaultDatasetsDestinations = default;
            IList<EventDestination> defaultEventsDestinations = default;
            IList<StreamDestination> defaultStreamsDestinations = default;
            IList<NamespaceDiscoveredDataset> datasets = default;
            IList<NamespaceDiscoveredEventGroup> eventGroups = default;
            IList<NamespaceDiscoveredStream> streams = default;
            IList<NamespaceDiscoveredManagementGroup> managementGroups = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("deviceRef"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deviceRef = DeviceRef.DeserializeDeviceRef(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("assetTypeRefs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    assetTypeRefs = array;
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("discoveryId"u8))
                {
                    discoveryId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    version = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("manufacturer"u8))
                {
                    manufacturer = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("manufacturerUri"u8))
                {
                    manufacturerUri = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("model"u8))
                {
                    model = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("productCode"u8))
                {
                    productCode = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hardwareRevision"u8))
                {
                    hardwareRevision = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("softwareRevision"u8))
                {
                    softwareRevision = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("documentationUri"u8))
                {
                    documentationUri = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("serialNumber"u8))
                {
                    serialNumber = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("attributes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    attributes = dictionary;
                    continue;
                }
                if (prop.NameEquals("defaultDatasetsConfiguration"u8))
                {
                    defaultDatasetsConfiguration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("defaultEventsConfiguration"u8))
                {
                    defaultEventsConfiguration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("defaultStreamsConfiguration"u8))
                {
                    defaultStreamsConfiguration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("defaultManagementGroupsConfiguration"u8))
                {
                    defaultManagementGroupsConfiguration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("defaultDatasetsDestinations"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasetDestination> array = new List<DatasetDestination>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DatasetDestination.DeserializeDatasetDestination(item, options));
                    }
                    defaultDatasetsDestinations = array;
                    continue;
                }
                if (prop.NameEquals("defaultEventsDestinations"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EventDestination> array = new List<EventDestination>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(EventDestination.DeserializeEventDestination(item, options));
                    }
                    defaultEventsDestinations = array;
                    continue;
                }
                if (prop.NameEquals("defaultStreamsDestinations"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StreamDestination> array = new List<StreamDestination>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StreamDestination.DeserializeStreamDestination(item, options));
                    }
                    defaultStreamsDestinations = array;
                    continue;
                }
                if (prop.NameEquals("datasets"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NamespaceDiscoveredDataset> array = new List<NamespaceDiscoveredDataset>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(NamespaceDiscoveredDataset.DeserializeNamespaceDiscoveredDataset(item, options));
                    }
                    datasets = array;
                    continue;
                }
                if (prop.NameEquals("eventGroups"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NamespaceDiscoveredEventGroup> array = new List<NamespaceDiscoveredEventGroup>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(NamespaceDiscoveredEventGroup.DeserializeNamespaceDiscoveredEventGroup(item, options));
                    }
                    eventGroups = array;
                    continue;
                }
                if (prop.NameEquals("streams"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NamespaceDiscoveredStream> array = new List<NamespaceDiscoveredStream>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(NamespaceDiscoveredStream.DeserializeNamespaceDiscoveredStream(item, options));
                    }
                    streams = array;
                    continue;
                }
                if (prop.NameEquals("managementGroups"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NamespaceDiscoveredManagementGroup> array = new List<NamespaceDiscoveredManagementGroup>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(NamespaceDiscoveredManagementGroup.DeserializeNamespaceDiscoveredManagementGroup(item, options));
                    }
                    managementGroups = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new NamespaceDiscoveredAssetUpdateProperties(
                deviceRef,
                displayName,
                assetTypeRefs ?? new ChangeTrackingList<string>(),
                description,
                discoveryId,
                version,
                manufacturer,
                manufacturerUri,
                model,
                productCode,
                hardwareRevision,
                softwareRevision,
                documentationUri,
                serialNumber,
                attributes ?? new ChangeTrackingDictionary<string, BinaryData>(),
                defaultDatasetsConfiguration,
                defaultEventsConfiguration,
                defaultStreamsConfiguration,
                defaultManagementGroupsConfiguration,
                defaultDatasetsDestinations ?? new ChangeTrackingList<DatasetDestination>(),
                defaultEventsDestinations ?? new ChangeTrackingList<EventDestination>(),
                defaultStreamsDestinations ?? new ChangeTrackingList<StreamDestination>(),
                datasets ?? new ChangeTrackingList<NamespaceDiscoveredDataset>(),
                eventGroups ?? new ChangeTrackingList<NamespaceDiscoveredEventGroup>(),
                streams ?? new ChangeTrackingList<NamespaceDiscoveredStream>(),
                managementGroups ?? new ChangeTrackingList<NamespaceDiscoveredManagementGroup>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDeviceRegistryContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NamespaceDiscoveredAssetUpdateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        NamespaceDiscoveredAssetUpdateProperties IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual NamespaceDiscoveredAssetUpdateProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeNamespaceDiscoveredAssetUpdateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NamespaceDiscoveredAssetUpdateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<NamespaceDiscoveredAssetUpdateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
