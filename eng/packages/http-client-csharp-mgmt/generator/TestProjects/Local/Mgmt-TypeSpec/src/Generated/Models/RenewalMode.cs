// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.Generator.MgmtTypeSpec.Tests;

namespace Azure.Generator.MgmtTypeSpec.Tests.Models
{
    /// <summary> Subscription renewal mode. </summary>
    public readonly partial struct RenewalMode : IEquatable<RenewalMode>
    {
        private readonly string _value;
        /// <summary> Automatic renewal. </summary>
        private const string AutoValue = "Auto";
        /// <summary> Manual renewal. </summary>
        private const string ManualValue = "Manual";

        /// <summary> Initializes a new instance of <see cref="RenewalMode"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RenewalMode(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Automatic renewal. </summary>
        public static RenewalMode Auto { get; } = new RenewalMode(AutoValue);

        /// <summary> Manual renewal. </summary>
        public static RenewalMode Manual { get; } = new RenewalMode(ManualValue);

        /// <summary> Determines if two <see cref="RenewalMode"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(RenewalMode left, RenewalMode right) => left.Equals(right);

        /// <summary> Determines if two <see cref="RenewalMode"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(RenewalMode left, RenewalMode right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="RenewalMode"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RenewalMode(string value) => new RenewalMode(value);

        /// <summary> Converts a string to a <see cref="RenewalMode"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RenewalMode?(string value) => value == null ? null : new RenewalMode(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RenewalMode other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(RenewalMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
