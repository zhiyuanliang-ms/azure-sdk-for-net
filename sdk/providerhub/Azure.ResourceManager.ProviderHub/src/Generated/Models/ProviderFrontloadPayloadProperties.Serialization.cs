// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class ProviderFrontloadPayloadProperties : IUtf8JsonSerializable, IJsonModel<ProviderFrontloadPayloadProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProviderFrontloadPayloadProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ProviderFrontloadPayloadProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProviderFrontloadPayloadProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProviderFrontloadPayloadProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("operationType"u8);
            writer.WriteStringValue(OperationType);
            writer.WritePropertyName("providerNamespace"u8);
            writer.WriteStringValue(ProviderNamespace);
            writer.WritePropertyName("frontloadLocation"u8);
            writer.WriteStringValue(FrontloadLocation);
            writer.WritePropertyName("copyFromLocation"u8);
            writer.WriteStringValue(CopyFromLocation);
            writer.WritePropertyName("environmentType"u8);
            writer.WriteStringValue(EnvironmentType.ToString());
            writer.WritePropertyName("serviceFeatureFlag"u8);
            writer.WriteStringValue(ServiceFeatureFlag.ToString());
            writer.WritePropertyName("includeResourceTypes"u8);
            writer.WriteStartArray();
            foreach (var item in IncludeResourceTypes)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("excludeResourceTypes"u8);
            writer.WriteStartArray();
            foreach (var item in ExcludeResourceTypes)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("overrideManifestLevelFields"u8);
            writer.WriteObjectValue(OverrideManifestLevelFields, options);
            writer.WritePropertyName("overrideEndpointLevelFields"u8);
            writer.WriteObjectValue(OverrideEndpointLevelFields, options);
            writer.WritePropertyName("ignoreFields"u8);
            writer.WriteStartArray();
            foreach (var item in IgnoreFields)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ProviderFrontloadPayloadProperties IJsonModel<ProviderFrontloadPayloadProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProviderFrontloadPayloadProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProviderFrontloadPayloadProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProviderFrontloadPayloadProperties(document.RootElement, options);
        }

        internal static ProviderFrontloadPayloadProperties DeserializeProviderFrontloadPayloadProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string operationType = default;
            string providerNamespace = default;
            string frontloadLocation = default;
            string copyFromLocation = default;
            AvailableCheckInManifestEnvironment environmentType = default;
            ServiceFeatureFlagAction serviceFeatureFlag = default;
            IList<string> includeResourceTypes = default;
            IList<string> excludeResourceTypes = default;
            ManifestLevelPropertyBag overrideManifestLevelFields = default;
            ResourceTypeEndpointBase overrideEndpointLevelFields = default;
            IList<string> ignoreFields = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("operationType"u8))
                {
                    operationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerNamespace"u8))
                {
                    providerNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frontloadLocation"u8))
                {
                    frontloadLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("copyFromLocation"u8))
                {
                    copyFromLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environmentType"u8))
                {
                    environmentType = new AvailableCheckInManifestEnvironment(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("serviceFeatureFlag"u8))
                {
                    serviceFeatureFlag = new ServiceFeatureFlagAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("includeResourceTypes"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    includeResourceTypes = array;
                    continue;
                }
                if (property.NameEquals("excludeResourceTypes"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    excludeResourceTypes = array;
                    continue;
                }
                if (property.NameEquals("overrideManifestLevelFields"u8))
                {
                    overrideManifestLevelFields = ManifestLevelPropertyBag.DeserializeManifestLevelPropertyBag(property.Value, options);
                    continue;
                }
                if (property.NameEquals("overrideEndpointLevelFields"u8))
                {
                    overrideEndpointLevelFields = ResourceTypeEndpointBase.DeserializeResourceTypeEndpointBase(property.Value, options);
                    continue;
                }
                if (property.NameEquals("ignoreFields"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ignoreFields = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ProviderFrontloadPayloadProperties(
                operationType,
                providerNamespace,
                frontloadLocation,
                copyFromLocation,
                environmentType,
                serviceFeatureFlag,
                includeResourceTypes,
                excludeResourceTypes,
                overrideManifestLevelFields,
                overrideEndpointLevelFields,
                ignoreFields,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProviderFrontloadPayloadProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProviderFrontloadPayloadProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerProviderHubContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ProviderFrontloadPayloadProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ProviderFrontloadPayloadProperties IPersistableModel<ProviderFrontloadPayloadProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProviderFrontloadPayloadProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeProviderFrontloadPayloadProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProviderFrontloadPayloadProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProviderFrontloadPayloadProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
