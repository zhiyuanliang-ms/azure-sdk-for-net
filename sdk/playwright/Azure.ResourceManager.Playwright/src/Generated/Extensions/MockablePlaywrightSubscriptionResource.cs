// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Playwright;
using Azure.ResourceManager.Playwright.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockablePlaywrightSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _playwrightWorkspacesClientDiagnostics;
        private PlaywrightWorkspaces _playwrightWorkspacesRestClient;

        /// <summary> Initializes a new instance of MockablePlaywrightSubscriptionResource for mocking. </summary>
        protected MockablePlaywrightSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockablePlaywrightSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockablePlaywrightSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PlaywrightWorkspacesClientDiagnostics => _playwrightWorkspacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Playwright.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private PlaywrightWorkspaces PlaywrightWorkspacesRestClient => _playwrightWorkspacesRestClient ??= new PlaywrightWorkspaces(PlaywrightWorkspacesClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        /// <summary> Gets a collection of PlaywrightQuotas in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of PlaywrightQuotas and their operations over a PlaywrightQuotaResource. </returns>
        public virtual PlaywrightQuotaCollection GetAllPlaywrightQuota(AzureLocation location)
        {
            return GetCachedClient(client => new PlaywrightQuotaCollection(client, Id, location));
        }

        /// <summary> Gets a subscription-level location-based Playwright quota resource by name. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<PlaywrightQuotaResource>> GetPlaywrightQuotaAsync(AzureLocation location, PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            return await GetAllPlaywrightQuota(location).GetAsync(playwrightQuotaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a subscription-level location-based Playwright quota resource by name. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<PlaywrightQuotaResource> GetPlaywrightQuota(AzureLocation location, PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            return GetAllPlaywrightQuota(location).Get(playwrightQuotaName, cancellationToken);
        }

        /// <summary> List PlaywrightWorkspace resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspacesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<PlaywrightWorkspaceData, PlaywrightWorkspaceResource>(new PlaywrightWorkspacesGetBySubscriptionAsyncCollectionResultOfT(PlaywrightWorkspacesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new PlaywrightWorkspaceResource(Client, data));
        }

        /// <summary> List PlaywrightWorkspace resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspaces(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<PlaywrightWorkspaceData, PlaywrightWorkspaceResource>(new PlaywrightWorkspacesGetBySubscriptionCollectionResultOfT(PlaywrightWorkspacesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new PlaywrightWorkspaceResource(Client, data));
        }

        /// <summary> Checks if a Playwright workspace name is available globally. </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<PlaywrightNameAvailabilityResult>> CheckPlaywrightNameAvailabilityAsync(PlaywrightNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using DiagnosticScope scope = PlaywrightWorkspacesClientDiagnostics.CreateScope("MockablePlaywrightSubscriptionResource.CheckPlaywrightNameAvailability");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = PlaywrightWorkspacesRestClient.CreateCheckPlaywrightNameAvailabilityRequest(Guid.Parse(Id.SubscriptionId), PlaywrightNameAvailabilityContent.ToRequestContent(content), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<PlaywrightNameAvailabilityResult> response = Response.FromValue(PlaywrightNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks if a Playwright workspace name is available globally. </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<PlaywrightNameAvailabilityResult> CheckPlaywrightNameAvailability(PlaywrightNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using DiagnosticScope scope = PlaywrightWorkspacesClientDiagnostics.CreateScope("MockablePlaywrightSubscriptionResource.CheckPlaywrightNameAvailability");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = PlaywrightWorkspacesRestClient.CreateCheckPlaywrightNameAvailabilityRequest(Guid.Parse(Id.SubscriptionId), PlaywrightNameAvailabilityContent.ToRequestContent(content), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<PlaywrightNameAvailabilityResult> response = Response.FromValue(PlaywrightNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
