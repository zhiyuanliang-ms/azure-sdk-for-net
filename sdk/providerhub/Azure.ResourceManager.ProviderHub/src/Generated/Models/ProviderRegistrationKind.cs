// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type. </summary>
    public readonly partial struct ProviderRegistrationKind : IEquatable<ProviderRegistrationKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProviderRegistrationKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProviderRegistrationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManagedValue = "Managed";
        private const string HybridValue = "Hybrid";
        private const string DirectValue = "Direct";

        /// <summary> Resource Provider with all the resource types 'managed' by the ProviderHub service. </summary>
        public static ProviderRegistrationKind Managed { get; } = new ProviderRegistrationKind(ManagedValue);
        /// <summary> Resource Provider with a mix of 'managed' and 'direct' resource types. </summary>
        public static ProviderRegistrationKind Hybrid { get; } = new ProviderRegistrationKind(HybridValue);
        /// <summary> Resource Provider with all the resource types 'managed' on by itself. </summary>
        public static ProviderRegistrationKind Direct { get; } = new ProviderRegistrationKind(DirectValue);
        /// <summary> Determines if two <see cref="ProviderRegistrationKind"/> values are the same. </summary>
        public static bool operator ==(ProviderRegistrationKind left, ProviderRegistrationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProviderRegistrationKind"/> values are not the same. </summary>
        public static bool operator !=(ProviderRegistrationKind left, ProviderRegistrationKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProviderRegistrationKind"/>. </summary>
        public static implicit operator ProviderRegistrationKind(string value) => new ProviderRegistrationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProviderRegistrationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProviderRegistrationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
