// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.DeviceRegistry;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> The x509 certificate for authentication mode Certificate. </summary>
    public partial class X509CertificateCredentials
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="X509CertificateCredentials"/>. </summary>
        /// <param name="certificateSecretName"> The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateSecretName"/> is null. </exception>
        public X509CertificateCredentials(string certificateSecretName)
        {
            Argument.AssertNotNull(certificateSecretName, nameof(certificateSecretName));

            CertificateSecretName = certificateSecretName;
        }

        /// <summary> Initializes a new instance of <see cref="X509CertificateCredentials"/>. </summary>
        /// <param name="certificateSecretName"> The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx). </param>
        /// <param name="keySecretName"> The name of the secret containing the certificate private key in PEM or DER format. </param>
        /// <param name="intermediateCertificatesSecretName"> The name of the secret containing the combined intermediate certificates in PEM format. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal X509CertificateCredentials(string certificateSecretName, string keySecretName, string intermediateCertificatesSecretName, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            CertificateSecretName = certificateSecretName;
            KeySecretName = keySecretName;
            IntermediateCertificatesSecretName = intermediateCertificatesSecretName;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx). </summary>
        public string CertificateSecretName { get; set; }

        /// <summary> The name of the secret containing the certificate private key in PEM or DER format. </summary>
        public string KeySecretName { get; set; }

        /// <summary> The name of the secret containing the combined intermediate certificates in PEM format. </summary>
        public string IntermediateCertificatesSecretName { get; set; }
    }
}
