// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The environment type. </summary>
    public readonly partial struct AvailableCheckInManifestEnvironment : IEquatable<AvailableCheckInManifestEnvironment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AvailableCheckInManifestEnvironment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AvailableCheckInManifestEnvironment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string CanaryValue = "Canary";
        private const string ProdValue = "Prod";
        private const string AllValue = "All";
        private const string MooncakeValue = "Mooncake";
        private const string FairfaxValue = "Fairfax";

        /// <summary> NotSpecified. </summary>
        public static AvailableCheckInManifestEnvironment NotSpecified { get; } = new AvailableCheckInManifestEnvironment(NotSpecifiedValue);
        /// <summary> Canary. </summary>
        public static AvailableCheckInManifestEnvironment Canary { get; } = new AvailableCheckInManifestEnvironment(CanaryValue);
        /// <summary> Prod. </summary>
        public static AvailableCheckInManifestEnvironment Prod { get; } = new AvailableCheckInManifestEnvironment(ProdValue);
        /// <summary> All. </summary>
        public static AvailableCheckInManifestEnvironment All { get; } = new AvailableCheckInManifestEnvironment(AllValue);
        /// <summary> Mooncake. </summary>
        public static AvailableCheckInManifestEnvironment Mooncake { get; } = new AvailableCheckInManifestEnvironment(MooncakeValue);
        /// <summary> Fairfax. </summary>
        public static AvailableCheckInManifestEnvironment Fairfax { get; } = new AvailableCheckInManifestEnvironment(FairfaxValue);
        /// <summary> Determines if two <see cref="AvailableCheckInManifestEnvironment"/> values are the same. </summary>
        public static bool operator ==(AvailableCheckInManifestEnvironment left, AvailableCheckInManifestEnvironment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AvailableCheckInManifestEnvironment"/> values are not the same. </summary>
        public static bool operator !=(AvailableCheckInManifestEnvironment left, AvailableCheckInManifestEnvironment right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AvailableCheckInManifestEnvironment"/>. </summary>
        public static implicit operator AvailableCheckInManifestEnvironment(string value) => new AvailableCheckInManifestEnvironment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AvailableCheckInManifestEnvironment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AvailableCheckInManifestEnvironment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
