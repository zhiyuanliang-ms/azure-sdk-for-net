// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.DeviceRegistry
{
    /// <summary>
    /// A class representing a collection of <see cref="DeviceRegistrySchemaVersionResource"/> and their operations.
    /// Each <see cref="DeviceRegistrySchemaVersionResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="DeviceRegistrySchemaVersionCollection"/> instance call the GetDeviceRegistrySchemaVersions method from an instance of the parent resource.
    /// </summary>
    public partial class DeviceRegistrySchemaVersionCollection : ArmCollection, IEnumerable<DeviceRegistrySchemaVersionResource>, IAsyncEnumerable<DeviceRegistrySchemaVersionResource>
    {
        private readonly ClientDiagnostics _schemaVersionsClientDiagnostics;
        private readonly SchemaVersions _schemaVersionsRestClient;

        /// <summary> Initializes a new instance of DeviceRegistrySchemaVersionCollection for mocking. </summary>
        protected DeviceRegistrySchemaVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistrySchemaVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DeviceRegistrySchemaVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(DeviceRegistrySchemaVersionResource.ResourceType, out string deviceRegistrySchemaVersionApiVersion);
            _schemaVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DeviceRegistry", DeviceRegistrySchemaVersionResource.ResourceType.Namespace, Diagnostics);
            _schemaVersionsRestClient = new SchemaVersions(_schemaVersionsClientDiagnostics, Pipeline, Endpoint, deviceRegistrySchemaVersionApiVersion ?? "2025-10-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DeviceRegistrySchemaResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, DeviceRegistrySchemaResource.ResourceType), id);
            }
        }

        /// <summary> Create a SchemaVersion. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<DeviceRegistrySchemaVersionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string schemaVersionName, DeviceRegistrySchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateCreateOrReplaceRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, DeviceRegistrySchemaVersionData.ToRequestContent(data), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<DeviceRegistrySchemaVersionData> response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                RequestUriBuilder uri = message.Request.Uri;
                RehydrationToken rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                DeviceRegistryArmOperation<DeviceRegistrySchemaVersionResource> operation = new DeviceRegistryArmOperation<DeviceRegistrySchemaVersionResource>(Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a SchemaVersion. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<DeviceRegistrySchemaVersionResource> CreateOrUpdate(WaitUntil waitUntil, string schemaVersionName, DeviceRegistrySchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateCreateOrReplaceRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, DeviceRegistrySchemaVersionData.ToRequestContent(data), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<DeviceRegistrySchemaVersionData> response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                RequestUriBuilder uri = message.Request.Uri;
                RehydrationToken rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                DeviceRegistryArmOperation<DeviceRegistrySchemaVersionResource> operation = new DeviceRegistryArmOperation<DeviceRegistrySchemaVersionResource>(Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a SchemaVersion. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<DeviceRegistrySchemaVersionResource>> GetAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<DeviceRegistrySchemaVersionData> response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a SchemaVersion. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<DeviceRegistrySchemaVersionResource> Get(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<DeviceRegistrySchemaVersionData> response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List SchemaVersion resources by Schema. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeviceRegistrySchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DeviceRegistrySchemaVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<DeviceRegistrySchemaVersionData, DeviceRegistrySchemaVersionResource>(new SchemaVersionsGetBySchemaAsyncCollectionResultOfT(
                _schemaVersionsRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.ResourceGroupName,
                Id.Parent.Name,
                Id.Name,
                context), data => new DeviceRegistrySchemaVersionResource(Client, data));
        }

        /// <summary> List SchemaVersion resources by Schema. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeviceRegistrySchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DeviceRegistrySchemaVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<DeviceRegistrySchemaVersionData, DeviceRegistrySchemaVersionResource>(new SchemaVersionsGetBySchemaCollectionResultOfT(
                _schemaVersionsRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.ResourceGroupName,
                Id.Parent.Name,
                Id.Name,
                context), data => new DeviceRegistrySchemaVersionResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<DeviceRegistrySchemaVersionData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((DeviceRegistrySchemaVersionData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<DeviceRegistrySchemaVersionData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((DeviceRegistrySchemaVersionData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<DeviceRegistrySchemaVersionResource>> GetIfExistsAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<DeviceRegistrySchemaVersionData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((DeviceRegistrySchemaVersionData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<DeviceRegistrySchemaVersionResource>(response.GetRawResponse());
                }
                return Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="schemaVersionName"> Schema version name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<DeviceRegistrySchemaVersionResource> GetIfExists(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using DiagnosticScope scope = _schemaVersionsClientDiagnostics.CreateScope("DeviceRegistrySchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _schemaVersionsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, schemaVersionName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<DeviceRegistrySchemaVersionData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(DeviceRegistrySchemaVersionData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((DeviceRegistrySchemaVersionData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<DeviceRegistrySchemaVersionResource>(response.GetRawResponse());
                }
                return Response.FromValue(new DeviceRegistrySchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DeviceRegistrySchemaVersionResource> IEnumerable<DeviceRegistrySchemaVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<DeviceRegistrySchemaVersionResource> IAsyncEnumerable<DeviceRegistrySchemaVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
