// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright
{
    /// <summary>
    /// A class representing a collection of <see cref="PlaywrightWorkspaceResource"/> and their operations.
    /// Each <see cref="PlaywrightWorkspaceResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="PlaywrightWorkspaceCollection"/> instance call the GetPlaywrightWorkspaces method from an instance of the parent resource.
    /// </summary>
    public partial class PlaywrightWorkspaceCollection : ArmCollection, IEnumerable<PlaywrightWorkspaceResource>, IAsyncEnumerable<PlaywrightWorkspaceResource>
    {
        private readonly ClientDiagnostics _playwrightWorkspacesClientDiagnostics;
        private readonly PlaywrightWorkspaces _playwrightWorkspacesRestClient;

        /// <summary> Initializes a new instance of PlaywrightWorkspaceCollection for mocking. </summary>
        protected PlaywrightWorkspaceCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PlaywrightWorkspaceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PlaywrightWorkspaceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(PlaywrightWorkspaceResource.ResourceType, out string playwrightWorkspaceApiVersion);
            _playwrightWorkspacesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Playwright", PlaywrightWorkspaceResource.ResourceType.Namespace, Diagnostics);
            _playwrightWorkspacesRestClient = new PlaywrightWorkspaces(_playwrightWorkspacesClientDiagnostics, Pipeline, Endpoint, playwrightWorkspaceApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Create a PlaywrightWorkspace. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<PlaywrightWorkspaceResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string playwrightWorkspaceName, PlaywrightWorkspaceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, PlaywrightWorkspaceData.ToRequestContent(data), context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                PlaywrightArmOperation<PlaywrightWorkspaceResource> operation = new PlaywrightArmOperation<PlaywrightWorkspaceResource>(
                    new PlaywrightWorkspaceOperationSource(Client),
                    _playwrightWorkspacesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a PlaywrightWorkspace. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<PlaywrightWorkspaceResource> CreateOrUpdate(WaitUntil waitUntil, string playwrightWorkspaceName, PlaywrightWorkspaceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, PlaywrightWorkspaceData.ToRequestContent(data), context);
                Response response = Pipeline.ProcessMessage(message, context);
                PlaywrightArmOperation<PlaywrightWorkspaceResource> operation = new PlaywrightArmOperation<PlaywrightWorkspaceResource>(
                    new PlaywrightWorkspaceOperationSource(Client),
                    _playwrightWorkspacesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a PlaywrightWorkspace. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<PlaywrightWorkspaceResource>> GetAsync(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<PlaywrightWorkspaceData> response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new PlaywrightWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a PlaywrightWorkspace. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<PlaywrightWorkspaceResource> Get(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<PlaywrightWorkspaceData> response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new PlaywrightWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List PlaywrightWorkspace resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlaywrightWorkspaceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<PlaywrightWorkspaceData, PlaywrightWorkspaceResource>(new PlaywrightWorkspacesGetByResourceGroupAsyncCollectionResultOfT(_playwrightWorkspacesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new PlaywrightWorkspaceResource(Client, data));
        }

        /// <summary> List PlaywrightWorkspace resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlaywrightWorkspaceResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<PlaywrightWorkspaceData, PlaywrightWorkspaceResource>(new PlaywrightWorkspacesGetByResourceGroupCollectionResultOfT(_playwrightWorkspacesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new PlaywrightWorkspaceResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<PlaywrightWorkspaceData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((PlaywrightWorkspaceData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<PlaywrightWorkspaceData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((PlaywrightWorkspaceData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<PlaywrightWorkspaceResource>> GetIfExistsAsync(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<PlaywrightWorkspaceData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((PlaywrightWorkspaceData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<PlaywrightWorkspaceResource>(response.GetRawResponse());
                }
                return Response.FromValue(new PlaywrightWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<PlaywrightWorkspaceResource> GetIfExists(string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(playwrightWorkspaceName, nameof(playwrightWorkspaceName));

            using DiagnosticScope scope = _playwrightWorkspacesClientDiagnostics.CreateScope("PlaywrightWorkspaceCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _playwrightWorkspacesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, playwrightWorkspaceName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<PlaywrightWorkspaceData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(PlaywrightWorkspaceData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((PlaywrightWorkspaceData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<PlaywrightWorkspaceResource>(response.GetRawResponse());
                }
                return Response.FromValue(new PlaywrightWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PlaywrightWorkspaceResource> IEnumerable<PlaywrightWorkspaceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<PlaywrightWorkspaceResource> IAsyncEnumerable<PlaywrightWorkspaceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
