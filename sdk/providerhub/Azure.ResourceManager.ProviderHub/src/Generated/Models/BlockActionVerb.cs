// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The action verb that will be blocked when the resource group is locked during move. </summary>
    public readonly partial struct BlockActionVerb : IEquatable<BlockActionVerb>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BlockActionVerb"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BlockActionVerb(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string ReadValue = "Read";
        private const string WriteValue = "Write";
        private const string ActionValue = "Action";
        private const string DeleteValue = "Delete";
        private const string UnrecognizedValue = "Unrecognized";

        /// <summary> NotSpecified. </summary>
        public static BlockActionVerb NotSpecified { get; } = new BlockActionVerb(NotSpecifiedValue);
        /// <summary> Read. </summary>
        public static BlockActionVerb Read { get; } = new BlockActionVerb(ReadValue);
        /// <summary> Write. </summary>
        public static BlockActionVerb Write { get; } = new BlockActionVerb(WriteValue);
        /// <summary> Action. </summary>
        public static BlockActionVerb Action { get; } = new BlockActionVerb(ActionValue);
        /// <summary> Delete. </summary>
        public static BlockActionVerb Delete { get; } = new BlockActionVerb(DeleteValue);
        /// <summary> Unrecognized. </summary>
        public static BlockActionVerb Unrecognized { get; } = new BlockActionVerb(UnrecognizedValue);
        /// <summary> Determines if two <see cref="BlockActionVerb"/> values are the same. </summary>
        public static bool operator ==(BlockActionVerb left, BlockActionVerb right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BlockActionVerb"/> values are not the same. </summary>
        public static bool operator !=(BlockActionVerb left, BlockActionVerb right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BlockActionVerb"/>. </summary>
        public static implicit operator BlockActionVerb(string value) => new BlockActionVerb(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BlockActionVerb other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BlockActionVerb other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
