// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The ResourceTypeEndpointBase. </summary>
    public partial class ResourceTypeEndpointBase
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourceTypeEndpointBase"/>. </summary>
        /// <param name="enabled"> Whether it's enabled. </param>
        /// <param name="apiVersions"> The api versions. </param>
        /// <param name="endpointUri"> The endpoint uri. </param>
        /// <param name="locations"> The locations. </param>
        /// <param name="requiredFeatures"> The required features. </param>
        /// <param name="featuresRule"> The features rule. </param>
        /// <param name="timeout"> This is a TimeSpan property. </param>
        /// <param name="endpointType"> The endpoint type. </param>
        /// <param name="dstsConfiguration"> The dsts configuration. </param>
        /// <param name="skuLink"> The sku link. </param>
        /// <param name="apiVersion"> The api version. </param>
        /// <param name="zones"> The zones. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersions"/>, <paramref name="endpointUri"/>, <paramref name="locations"/>, <paramref name="requiredFeatures"/>, <paramref name="featuresRule"/>, <paramref name="dstsConfiguration"/>, <paramref name="skuLink"/>, <paramref name="apiVersion"/> or <paramref name="zones"/> is null. </exception>
        public ResourceTypeEndpointBase(bool enabled, IEnumerable<string> apiVersions, Uri endpointUri, IEnumerable<string> locations, IEnumerable<string> requiredFeatures, ProviderFeaturesRule featuresRule, TimeSpan timeout, ProviderEndpointType endpointType, ProviderDstsConfiguration dstsConfiguration, string skuLink, string apiVersion, IEnumerable<string> zones)
        {
            Argument.AssertNotNull(apiVersions, nameof(apiVersions));
            Argument.AssertNotNull(endpointUri, nameof(endpointUri));
            Argument.AssertNotNull(locations, nameof(locations));
            Argument.AssertNotNull(requiredFeatures, nameof(requiredFeatures));
            Argument.AssertNotNull(featuresRule, nameof(featuresRule));
            Argument.AssertNotNull(dstsConfiguration, nameof(dstsConfiguration));
            Argument.AssertNotNull(skuLink, nameof(skuLink));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(zones, nameof(zones));

            Enabled = enabled;
            ApiVersions = apiVersions.ToList();
            EndpointUri = endpointUri;
            Locations = locations.ToList();
            RequiredFeatures = requiredFeatures.ToList();
            FeaturesRule = featuresRule;
            Timeout = timeout;
            EndpointType = endpointType;
            DstsConfiguration = dstsConfiguration;
            SkuLink = skuLink;
            ApiVersion = apiVersion;
            Zones = zones.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ResourceTypeEndpointBase"/>. </summary>
        /// <param name="enabled"> Whether it's enabled. </param>
        /// <param name="apiVersions"> The api versions. </param>
        /// <param name="endpointUri"> The endpoint uri. </param>
        /// <param name="locations"> The locations. </param>
        /// <param name="requiredFeatures"> The required features. </param>
        /// <param name="featuresRule"> The features rule. </param>
        /// <param name="timeout"> This is a TimeSpan property. </param>
        /// <param name="endpointType"> The endpoint type. </param>
        /// <param name="dstsConfiguration"> The dsts configuration. </param>
        /// <param name="skuLink"> The sku link. </param>
        /// <param name="apiVersion"> The api version. </param>
        /// <param name="zones"> The zones. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourceTypeEndpointBase(bool enabled, IList<string> apiVersions, Uri endpointUri, IList<string> locations, IList<string> requiredFeatures, ProviderFeaturesRule featuresRule, TimeSpan timeout, ProviderEndpointType endpointType, ProviderDstsConfiguration dstsConfiguration, string skuLink, string apiVersion, IList<string> zones, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Enabled = enabled;
            ApiVersions = apiVersions;
            EndpointUri = endpointUri;
            Locations = locations;
            RequiredFeatures = requiredFeatures;
            FeaturesRule = featuresRule;
            Timeout = timeout;
            EndpointType = endpointType;
            DstsConfiguration = dstsConfiguration;
            SkuLink = skuLink;
            ApiVersion = apiVersion;
            Zones = zones;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ResourceTypeEndpointBase"/> for deserialization. </summary>
        internal ResourceTypeEndpointBase()
        {
        }

        /// <summary> Whether it's enabled. </summary>
        public bool Enabled { get; }
        /// <summary> The api versions. </summary>
        public IList<string> ApiVersions { get; }
        /// <summary> The endpoint uri. </summary>
        public Uri EndpointUri { get; }
        /// <summary> The locations. </summary>
        public IList<string> Locations { get; }
        /// <summary> The required features. </summary>
        public IList<string> RequiredFeatures { get; }
        /// <summary> The features rule. </summary>
        internal ProviderFeaturesRule FeaturesRule { get; }
        /// <summary> The required feature policy. </summary>
        public FeaturesPolicy? RequiredFeaturesPolicy
        {
            get => FeaturesRule?.RequiredFeaturesPolicy;
        }

        /// <summary> This is a TimeSpan property. </summary>
        public TimeSpan Timeout { get; }
        /// <summary> The endpoint type. </summary>
        public ProviderEndpointType EndpointType { get; }
        /// <summary> The dsts configuration. </summary>
        public ProviderDstsConfiguration DstsConfiguration { get; }
        /// <summary> The sku link. </summary>
        public string SkuLink { get; }
        /// <summary> The api version. </summary>
        public string ApiVersion { get; }
        /// <summary> The zones. </summary>
        public IList<string> Zones { get; }
    }
}
