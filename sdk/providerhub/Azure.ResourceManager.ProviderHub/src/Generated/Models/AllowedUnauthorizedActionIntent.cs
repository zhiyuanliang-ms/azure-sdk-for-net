// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The intent. </summary>
    public readonly partial struct AllowedUnauthorizedActionIntent : IEquatable<AllowedUnauthorizedActionIntent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AllowedUnauthorizedActionIntent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AllowedUnauthorizedActionIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NOT_SPECIFIED";
        private const string LowPrivilegeValue = "LOW_PRIVILEGE";
        private const string DeferredAccessCheckValue = "DEFERRED_ACCESS_CHECK";
        private const string RPContractValue = "RP_CONTRACT";

        /// <summary> Default value. </summary>
        public static AllowedUnauthorizedActionIntent NotSpecified { get; } = new AllowedUnauthorizedActionIntent(NotSpecifiedValue);
        /// <summary> Data is not sensitive and ok to access. </summary>
        public static AllowedUnauthorizedActionIntent LowPrivilege { get; } = new AllowedUnauthorizedActionIntent(LowPrivilegeValue);
        /// <summary> Used for RP's using a custom authorization check outside of ARM. </summary>
        public static AllowedUnauthorizedActionIntent DeferredAccessCheck { get; } = new AllowedUnauthorizedActionIntent(DeferredAccessCheckValue);
        /// <summary> RP contract allows certain operations to be unauthorized action. </summary>
        public static AllowedUnauthorizedActionIntent RPContract { get; } = new AllowedUnauthorizedActionIntent(RPContractValue);
        /// <summary> Determines if two <see cref="AllowedUnauthorizedActionIntent"/> values are the same. </summary>
        public static bool operator ==(AllowedUnauthorizedActionIntent left, AllowedUnauthorizedActionIntent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AllowedUnauthorizedActionIntent"/> values are not the same. </summary>
        public static bool operator !=(AllowedUnauthorizedActionIntent left, AllowedUnauthorizedActionIntent right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AllowedUnauthorizedActionIntent"/>. </summary>
        public static implicit operator AllowedUnauthorizedActionIntent(string value) => new AllowedUnauthorizedActionIntent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AllowedUnauthorizedActionIntent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AllowedUnauthorizedActionIntent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
