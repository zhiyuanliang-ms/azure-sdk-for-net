// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DeviceRegistry;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeviceRegistry.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableDeviceRegistryResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableDeviceRegistryResourceGroupResource for mocking. </summary>
        protected MockableDeviceRegistryResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableDeviceRegistryResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableDeviceRegistryResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of DeviceRegistryAssets in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeviceRegistryAssets and their operations over a DeviceRegistryAssetResource. </returns>
        public virtual DeviceRegistryAssetCollection GetDeviceRegistryAssets()
        {
            return GetCachedClient(client => new DeviceRegistryAssetCollection(client, Id));
        }

        /// <summary> Get a Asset. </summary>
        /// <param name="assetName"> Asset name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeviceRegistryAssetResource>> GetDeviceRegistryAssetAsync(string assetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            return await GetDeviceRegistryAssets().GetAsync(assetName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a Asset. </summary>
        /// <param name="assetName"> Asset name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeviceRegistryAssetResource> GetDeviceRegistryAsset(string assetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            return GetDeviceRegistryAssets().Get(assetName, cancellationToken);
        }

        /// <summary> Gets a collection of DeviceRegistryAssetEndpointProfiles in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeviceRegistryAssetEndpointProfiles and their operations over a DeviceRegistryAssetEndpointProfileResource. </returns>
        public virtual DeviceRegistryAssetEndpointProfileCollection GetDeviceRegistryAssetEndpointProfiles()
        {
            return GetCachedClient(client => new DeviceRegistryAssetEndpointProfileCollection(client, Id));
        }

        /// <summary> Get a AssetEndpointProfile. </summary>
        /// <param name="assetEndpointProfileName"> Asset Endpoint Profile name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assetEndpointProfileName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assetEndpointProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeviceRegistryAssetEndpointProfileResource>> GetDeviceRegistryAssetEndpointProfileAsync(string assetEndpointProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assetEndpointProfileName, nameof(assetEndpointProfileName));

            return await GetDeviceRegistryAssetEndpointProfiles().GetAsync(assetEndpointProfileName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a AssetEndpointProfile. </summary>
        /// <param name="assetEndpointProfileName"> Asset Endpoint Profile name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assetEndpointProfileName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assetEndpointProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeviceRegistryAssetEndpointProfileResource> GetDeviceRegistryAssetEndpointProfile(string assetEndpointProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assetEndpointProfileName, nameof(assetEndpointProfileName));

            return GetDeviceRegistryAssetEndpointProfiles().Get(assetEndpointProfileName, cancellationToken);
        }

        /// <summary> Gets a collection of DeviceRegistryNamespaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeviceRegistryNamespaces and their operations over a DeviceRegistryNamespaceResource. </returns>
        public virtual DeviceRegistryNamespaceCollection GetDeviceRegistryNamespaces()
        {
            return GetCachedClient(client => new DeviceRegistryNamespaceCollection(client, Id));
        }

        /// <summary> Get a Namespace. </summary>
        /// <param name="namespaceName"> The name of the namespace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="namespaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="namespaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeviceRegistryNamespaceResource>> GetDeviceRegistryNamespaceAsync(string namespaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namespaceName, nameof(namespaceName));

            return await GetDeviceRegistryNamespaces().GetAsync(namespaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a Namespace. </summary>
        /// <param name="namespaceName"> The name of the namespace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="namespaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="namespaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeviceRegistryNamespaceResource> GetDeviceRegistryNamespace(string namespaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namespaceName, nameof(namespaceName));

            return GetDeviceRegistryNamespaces().Get(namespaceName, cancellationToken);
        }

        /// <summary> Gets a collection of DeviceRegistrySchemaRegistries in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeviceRegistrySchemaRegistries and their operations over a DeviceRegistrySchemaRegistryResource. </returns>
        public virtual DeviceRegistrySchemaRegistryCollection GetDeviceRegistrySchemaRegistries()
        {
            return GetCachedClient(client => new DeviceRegistrySchemaRegistryCollection(client, Id));
        }

        /// <summary> Get a SchemaRegistry. </summary>
        /// <param name="schemaRegistryName"> Schema registry name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaRegistryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeviceRegistrySchemaRegistryResource>> GetDeviceRegistrySchemaRegistryAsync(string schemaRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaRegistryName, nameof(schemaRegistryName));

            return await GetDeviceRegistrySchemaRegistries().GetAsync(schemaRegistryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a SchemaRegistry. </summary>
        /// <param name="schemaRegistryName"> Schema registry name parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaRegistryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeviceRegistrySchemaRegistryResource> GetDeviceRegistrySchemaRegistry(string schemaRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaRegistryName, nameof(schemaRegistryName));

            return GetDeviceRegistrySchemaRegistries().Get(schemaRegistryName, cancellationToken);
        }
    }
}
