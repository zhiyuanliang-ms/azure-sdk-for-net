// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class LinkedNotificationRule : IUtf8JsonSerializable, IJsonModel<LinkedNotificationRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LinkedNotificationRule>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<LinkedNotificationRule>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkedNotificationRule>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkedNotificationRule)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Actions))
            {
                writer.WritePropertyName("actions"u8);
                writer.WriteStartArray();
                foreach (var item in Actions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ActionsOnFailedOperation))
            {
                writer.WritePropertyName("actionsOnFailedOperation"u8);
                writer.WriteStartArray();
                foreach (var item in ActionsOnFailedOperation)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FastPathActions))
            {
                writer.WritePropertyName("fastPathActions"u8);
                writer.WriteStartArray();
                foreach (var item in FastPathActions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FastPathActionsOnFailedOperation))
            {
                writer.WritePropertyName("fastPathActionsOnFailedOperation"u8);
                writer.WriteStartArray();
                foreach (var item in FastPathActionsOnFailedOperation)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LinkedNotificationTimeout))
            {
                writer.WritePropertyName("linkedNotificationTimeout"u8);
                writer.WriteStringValue(LinkedNotificationTimeout.Value, "P");
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        LinkedNotificationRule IJsonModel<LinkedNotificationRule>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkedNotificationRule>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkedNotificationRule)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLinkedNotificationRule(document.RootElement, options);
        }

        internal static LinkedNotificationRule DeserializeLinkedNotificationRule(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> actions = default;
            IList<string> actionsOnFailedOperation = default;
            IList<string> fastPathActions = default;
            IList<string> fastPathActionsOnFailedOperation = default;
            TimeSpan? linkedNotificationTimeout = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("actions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    actions = array;
                    continue;
                }
                if (property.NameEquals("actionsOnFailedOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    actionsOnFailedOperation = array;
                    continue;
                }
                if (property.NameEquals("fastPathActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    fastPathActions = array;
                    continue;
                }
                if (property.NameEquals("fastPathActionsOnFailedOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    fastPathActionsOnFailedOperation = array;
                    continue;
                }
                if (property.NameEquals("linkedNotificationTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linkedNotificationTimeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new LinkedNotificationRule(
                actions ?? new ChangeTrackingList<string>(),
                actionsOnFailedOperation ?? new ChangeTrackingList<string>(),
                fastPathActions ?? new ChangeTrackingList<string>(),
                fastPathActionsOnFailedOperation ?? new ChangeTrackingList<string>(),
                linkedNotificationTimeout,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<LinkedNotificationRule>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkedNotificationRule>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerProviderHubContext.Default);
                default:
                    throw new FormatException($"The model {nameof(LinkedNotificationRule)} does not support writing '{options.Format}' format.");
            }
        }

        LinkedNotificationRule IPersistableModel<LinkedNotificationRule>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkedNotificationRule>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeLinkedNotificationRule(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LinkedNotificationRule)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<LinkedNotificationRule>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
