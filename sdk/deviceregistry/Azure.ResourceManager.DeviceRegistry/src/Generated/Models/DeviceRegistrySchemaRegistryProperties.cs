// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.DeviceRegistry;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the schema registry properties. </summary>
    public partial class DeviceRegistrySchemaRegistryProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DeviceRegistrySchemaRegistryProperties"/>. </summary>
        /// <param name="namespace"> Schema registry namespace. Uniquely identifies a schema registry within a tenant. </param>
        /// <param name="storageAccountContainerUri"> The Storage Account's Container URL where schemas will be stored. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="namespace"/> or <paramref name="storageAccountContainerUri"/> is null. </exception>
        public DeviceRegistrySchemaRegistryProperties(string @namespace, Uri storageAccountContainerUri)
        {
            Argument.AssertNotNull(@namespace, nameof(@namespace));
            Argument.AssertNotNull(storageAccountContainerUri, nameof(storageAccountContainerUri));

            Namespace = @namespace;
            StorageAccountContainerUri = storageAccountContainerUri;
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistrySchemaRegistryProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="namespace"> Schema registry namespace. Uniquely identifies a schema registry within a tenant. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="description"> Human-readable description of the schema registry. </param>
        /// <param name="storageAccountContainerUri"> The Storage Account's Container URL where schemas will be stored. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DeviceRegistrySchemaRegistryProperties(string uuid, string @namespace, string displayName, string description, Uri storageAccountContainerUri, DeviceRegistryProvisioningState? provisioningState, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Uuid = uuid;
            Namespace = @namespace;
            DisplayName = displayName;
            Description = description;
            StorageAccountContainerUri = storageAccountContainerUri;
            ProvisioningState = provisioningState;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Globally unique, immutable, non-reusable id. </summary>
        public string Uuid { get; }

        /// <summary> Schema registry namespace. Uniquely identifies a schema registry within a tenant. </summary>
        public string Namespace { get; set; }

        /// <summary> Human-readable display name. </summary>
        public string DisplayName { get; set; }

        /// <summary> Human-readable description of the schema registry. </summary>
        public string Description { get; set; }

        /// <summary> The Storage Account's Container URL where schemas will be stored. </summary>
        public Uri StorageAccountContainerUri { get; set; }

        /// <summary> Provisioning state of the resource. </summary>
        public DeviceRegistryProvisioningState? ProvisioningState { get; }
    }
}
