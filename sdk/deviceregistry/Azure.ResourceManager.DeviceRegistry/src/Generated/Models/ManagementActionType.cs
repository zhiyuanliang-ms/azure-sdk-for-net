// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.DeviceRegistry;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the ManagementAction's type. </summary>
    public readonly partial struct ManagementActionType : IEquatable<ManagementActionType>
    {
        private readonly string _value;
        /// <summary> Call action type. </summary>
        private const string CallValue = "Call";
        /// <summary> Read action type. </summary>
        private const string ReadValue = "Read";
        /// <summary> Write action type. </summary>
        private const string WriteValue = "Write";

        /// <summary> Initializes a new instance of <see cref="ManagementActionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ManagementActionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Call action type. </summary>
        public static ManagementActionType Call { get; } = new ManagementActionType(CallValue);

        /// <summary> Read action type. </summary>
        public static ManagementActionType Read { get; } = new ManagementActionType(ReadValue);

        /// <summary> Write action type. </summary>
        public static ManagementActionType Write { get; } = new ManagementActionType(WriteValue);

        /// <summary> Determines if two <see cref="ManagementActionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ManagementActionType left, ManagementActionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ManagementActionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ManagementActionType left, ManagementActionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ManagementActionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ManagementActionType(string value) => new ManagementActionType(value);

        /// <summary> Converts a string to a <see cref="ManagementActionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ManagementActionType?(string value) => value == null ? null : new ManagementActionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ManagementActionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ManagementActionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
