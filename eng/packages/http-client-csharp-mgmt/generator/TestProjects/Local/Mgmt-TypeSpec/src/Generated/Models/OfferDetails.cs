// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Generator.MgmtTypeSpec.Tests;

namespace Azure.Generator.MgmtTypeSpec.Tests.Models
{
    /// <summary> Offer details for the marketplace that is selected by the user. </summary>
    public partial class OfferDetails
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="OfferDetails"/>. </summary>
        /// <param name="publisherId"> Publisher Id for the marketplace offer. </param>
        /// <param name="offerId"> Offer Id for the marketplace offer. </param>
        /// <param name="planId"> Plan Id for the marketplace offer. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        public OfferDetails(string publisherId, string offerId, string planId)
        {
            Argument.AssertNotNull(publisherId, nameof(publisherId));
            Argument.AssertNotNull(offerId, nameof(offerId));
            Argument.AssertNotNull(planId, nameof(planId));

            PublisherId = publisherId;
            OfferId = offerId;
            PlanId = planId;
        }

        /// <summary> Initializes a new instance of <see cref="OfferDetails"/>. </summary>
        /// <param name="publisherId"> Publisher Id for the marketplace offer. </param>
        /// <param name="offerId"> Offer Id for the marketplace offer. </param>
        /// <param name="planId"> Plan Id for the marketplace offer. </param>
        /// <param name="planName"> Plan Name for the marketplace offer. </param>
        /// <param name="termUnit"> Plan Display Name for the marketplace offer. </param>
        /// <param name="termId"> Plan Display Name for the marketplace offer. </param>
        /// <param name="renewalMode"> Subscription renewal mode. </param>
        /// <param name="endOn"> Current subscription end date and time. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal OfferDetails(string publisherId, string offerId, string planId, string planName, string termUnit, string termId, RenewalMode? renewalMode, DateTimeOffset? endOn, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PublisherId = publisherId;
            OfferId = offerId;
            PlanId = planId;
            PlanName = planName;
            TermUnit = termUnit;
            TermId = termId;
            RenewalMode = renewalMode;
            EndOn = endOn;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Publisher Id for the marketplace offer. </summary>
        [WirePath("publisherId")]
        public string PublisherId { get; set; }

        /// <summary> Offer Id for the marketplace offer. </summary>
        [WirePath("offerId")]
        public string OfferId { get; set; }

        /// <summary> Plan Id for the marketplace offer. </summary>
        [WirePath("planId")]
        public string PlanId { get; set; }

        /// <summary> Plan Name for the marketplace offer. </summary>
        [WirePath("planName")]
        public string PlanName { get; set; }

        /// <summary> Plan Display Name for the marketplace offer. </summary>
        [WirePath("termUnit")]
        public string TermUnit { get; set; }

        /// <summary> Plan Display Name for the marketplace offer. </summary>
        [WirePath("termId")]
        public string TermId { get; set; }

        /// <summary> Subscription renewal mode. </summary>
        [WirePath("renewalMode")]
        public RenewalMode? RenewalMode { get; set; }

        /// <summary> Current subscription end date and time. </summary>
        [WirePath("endDate")]
        public DateTimeOffset? EndOn { get; }
    }
}
