// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The endpoint type. </summary>
    public readonly partial struct ProviderEndpointType : IEquatable<ProviderEndpointType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProviderEndpointType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProviderEndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string CanaryValue = "Canary";
        private const string ProductionValue = "Production";
        private const string TestInProductionValue = "TestInProduction";

        /// <summary> NotSpecified. </summary>
        public static ProviderEndpointType NotSpecified { get; } = new ProviderEndpointType(NotSpecifiedValue);
        /// <summary> Canary. </summary>
        public static ProviderEndpointType Canary { get; } = new ProviderEndpointType(CanaryValue);
        /// <summary> Production. </summary>
        public static ProviderEndpointType Production { get; } = new ProviderEndpointType(ProductionValue);
        /// <summary> TestInProduction. </summary>
        public static ProviderEndpointType TestInProduction { get; } = new ProviderEndpointType(TestInProductionValue);
        /// <summary> Determines if two <see cref="ProviderEndpointType"/> values are the same. </summary>
        public static bool operator ==(ProviderEndpointType left, ProviderEndpointType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProviderEndpointType"/> values are not the same. </summary>
        public static bool operator !=(ProviderEndpointType left, ProviderEndpointType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProviderEndpointType"/>. </summary>
        public static implicit operator ProviderEndpointType(string value) => new ProviderEndpointType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProviderEndpointType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProviderEndpointType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
