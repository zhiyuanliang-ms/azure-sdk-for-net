// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The ProviderLegacyOperation. </summary>
    public readonly partial struct ProviderLegacyOperation : IEquatable<ProviderLegacyOperation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProviderLegacyOperation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProviderLegacyOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string CreateValue = "Create";
        private const string DeleteValue = "Delete";
        private const string WaitingValue = "Waiting";
        private const string AzureAsyncOperationWaitingValue = "AzureAsyncOperationWaiting";
        private const string ResourceCacheWaitingValue = "ResourceCacheWaiting";
        private const string ActionValue = "Action";
        private const string ReadValue = "Read";
        private const string EvaluateDeploymentOutputValue = "EvaluateDeploymentOutput";
        private const string DeploymentCleanupValue = "DeploymentCleanup";

        /// <summary> NotSpecified. </summary>
        public static ProviderLegacyOperation NotSpecified { get; } = new ProviderLegacyOperation(NotSpecifiedValue);
        /// <summary> Create. </summary>
        public static ProviderLegacyOperation Create { get; } = new ProviderLegacyOperation(CreateValue);
        /// <summary> Delete. </summary>
        public static ProviderLegacyOperation Delete { get; } = new ProviderLegacyOperation(DeleteValue);
        /// <summary> Waiting. </summary>
        public static ProviderLegacyOperation Waiting { get; } = new ProviderLegacyOperation(WaitingValue);
        /// <summary> AzureAsyncOperationWaiting. </summary>
        public static ProviderLegacyOperation AzureAsyncOperationWaiting { get; } = new ProviderLegacyOperation(AzureAsyncOperationWaitingValue);
        /// <summary> ResourceCacheWaiting. </summary>
        public static ProviderLegacyOperation ResourceCacheWaiting { get; } = new ProviderLegacyOperation(ResourceCacheWaitingValue);
        /// <summary> Action. </summary>
        public static ProviderLegacyOperation Action { get; } = new ProviderLegacyOperation(ActionValue);
        /// <summary> Read. </summary>
        public static ProviderLegacyOperation Read { get; } = new ProviderLegacyOperation(ReadValue);
        /// <summary> EvaluateDeploymentOutput. </summary>
        public static ProviderLegacyOperation EvaluateDeploymentOutput { get; } = new ProviderLegacyOperation(EvaluateDeploymentOutputValue);
        /// <summary> DeploymentCleanup. </summary>
        public static ProviderLegacyOperation DeploymentCleanup { get; } = new ProviderLegacyOperation(DeploymentCleanupValue);
        /// <summary> Determines if two <see cref="ProviderLegacyOperation"/> values are the same. </summary>
        public static bool operator ==(ProviderLegacyOperation left, ProviderLegacyOperation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProviderLegacyOperation"/> values are not the same. </summary>
        public static bool operator !=(ProviderLegacyOperation left, ProviderLegacyOperation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProviderLegacyOperation"/>. </summary>
        public static implicit operator ProviderLegacyOperation(string value) => new ProviderLegacyOperation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProviderLegacyOperation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProviderLegacyOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
