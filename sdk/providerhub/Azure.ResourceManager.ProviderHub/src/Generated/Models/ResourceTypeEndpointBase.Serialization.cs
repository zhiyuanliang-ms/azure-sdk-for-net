// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class ResourceTypeEndpointBase : IUtf8JsonSerializable, IJsonModel<ResourceTypeEndpointBase>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResourceTypeEndpointBase>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ResourceTypeEndpointBase>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceTypeEndpointBase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceTypeEndpointBase)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("enabled"u8);
            writer.WriteBooleanValue(Enabled);
            writer.WritePropertyName("apiVersions"u8);
            writer.WriteStartArray();
            foreach (var item in ApiVersions)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("endpointUri"u8);
            writer.WriteStringValue(EndpointUri.AbsoluteUri);
            writer.WritePropertyName("locations"u8);
            writer.WriteStartArray();
            foreach (var item in Locations)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("requiredFeatures"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredFeatures)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("featuresRule"u8);
            writer.WriteObjectValue(FeaturesRule, options);
            writer.WritePropertyName("timeout"u8);
            writer.WriteStringValue(Timeout, "P");
            writer.WritePropertyName("endpointType"u8);
            writer.WriteStringValue(EndpointType.ToString());
            writer.WritePropertyName("dstsConfiguration"u8);
            writer.WriteObjectValue(DstsConfiguration, options);
            writer.WritePropertyName("skuLink"u8);
            writer.WriteStringValue(SkuLink);
            writer.WritePropertyName("apiVersion"u8);
            writer.WriteStringValue(ApiVersion);
            writer.WritePropertyName("zones"u8);
            writer.WriteStartArray();
            foreach (var item in Zones)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ResourceTypeEndpointBase IJsonModel<ResourceTypeEndpointBase>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceTypeEndpointBase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceTypeEndpointBase)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceTypeEndpointBase(document.RootElement, options);
        }

        internal static ResourceTypeEndpointBase DeserializeResourceTypeEndpointBase(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool enabled = default;
            IList<string> apiVersions = default;
            Uri endpointUri = default;
            IList<string> locations = default;
            IList<string> requiredFeatures = default;
            ProviderFeaturesRule featuresRule = default;
            TimeSpan timeout = default;
            ProviderEndpointType endpointType = default;
            ProviderDstsConfiguration dstsConfiguration = default;
            string skuLink = default;
            string apiVersion = default;
            IList<string> zones = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"u8))
                {
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("apiVersions"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    apiVersions = array;
                    continue;
                }
                if (property.NameEquals("endpointUri"u8))
                {
                    endpointUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("locations"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    locations = array;
                    continue;
                }
                if (property.NameEquals("requiredFeatures"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    requiredFeatures = array;
                    continue;
                }
                if (property.NameEquals("featuresRule"u8))
                {
                    featuresRule = ProviderFeaturesRule.DeserializeProviderFeaturesRule(property.Value, options);
                    continue;
                }
                if (property.NameEquals("timeout"u8))
                {
                    timeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("endpointType"u8))
                {
                    endpointType = new ProviderEndpointType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dstsConfiguration"u8))
                {
                    dstsConfiguration = ProviderDstsConfiguration.DeserializeProviderDstsConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("skuLink"u8))
                {
                    skuLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiVersion"u8))
                {
                    apiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("zones"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    zones = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ResourceTypeEndpointBase(
                enabled,
                apiVersions,
                endpointUri,
                locations,
                requiredFeatures,
                featuresRule,
                timeout,
                endpointType,
                dstsConfiguration,
                skuLink,
                apiVersion,
                zones,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ResourceTypeEndpointBase>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceTypeEndpointBase>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerProviderHubContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResourceTypeEndpointBase)} does not support writing '{options.Format}' format.");
            }
        }

        ResourceTypeEndpointBase IPersistableModel<ResourceTypeEndpointBase>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceTypeEndpointBase>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeResourceTypeEndpointBase(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourceTypeEndpointBase)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResourceTypeEndpointBase>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
