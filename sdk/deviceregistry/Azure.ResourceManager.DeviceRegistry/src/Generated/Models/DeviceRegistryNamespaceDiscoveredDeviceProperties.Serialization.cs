// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.DeviceRegistry;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the discovered device properties. </summary>
    public partial class DeviceRegistryNamespaceDiscoveredDeviceProperties : IJsonModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DeviceRegistryNamespaceDiscoveredDeviceProperties"/> for deserialization. </summary>
        internal DeviceRegistryNamespaceDiscoveredDeviceProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeviceRegistryNamespaceDiscoveredDeviceProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(ExternalDeviceId))
            {
                writer.WritePropertyName("externalDeviceId"u8);
                writer.WriteStringValue(ExternalDeviceId);
            }
            if (Optional.IsDefined(Endpoints))
            {
                writer.WritePropertyName("endpoints"u8);
                writer.WriteObjectValue(Endpoints, options);
            }
            if (Optional.IsDefined(Manufacturer))
            {
                writer.WritePropertyName("manufacturer"u8);
                writer.WriteStringValue(Manufacturer);
            }
            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Optional.IsDefined(OperatingSystem))
            {
                writer.WritePropertyName("operatingSystem"u8);
                writer.WriteStringValue(OperatingSystem);
            }
            if (Optional.IsDefined(OperatingSystemVersion))
            {
                writer.WritePropertyName("operatingSystemVersion"u8);
                writer.WriteStringValue(OperatingSystemVersion);
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartObject();
                foreach (var item in Attributes)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("discoveryId"u8);
            writer.WriteStringValue(DiscoveryId);
            writer.WritePropertyName("version"u8);
            writer.WriteNumberValue(Version);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeviceRegistryNamespaceDiscoveredDeviceProperties IJsonModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeviceRegistryNamespaceDiscoveredDeviceProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeviceRegistryNamespaceDiscoveredDeviceProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeviceRegistryNamespaceDiscoveredDeviceProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DeviceRegistryNamespaceDiscoveredDeviceProperties DeserializeDeviceRegistryNamespaceDiscoveredDeviceProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string externalDeviceId = default;
            DiscoveredMessagingEndpoints endpoints = default;
            string manufacturer = default;
            string model = default;
            string operatingSystem = default;
            string operatingSystemVersion = default;
            IDictionary<string, BinaryData> attributes = default;
            string discoveryId = default;
            long version = default;
            DeviceRegistryProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("externalDeviceId"u8))
                {
                    externalDeviceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("endpoints"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpoints = DiscoveredMessagingEndpoints.DeserializeDiscoveredMessagingEndpoints(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("manufacturer"u8))
                {
                    manufacturer = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("model"u8))
                {
                    model = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("operatingSystem"u8))
                {
                    operatingSystem = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("operatingSystemVersion"u8))
                {
                    operatingSystemVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("attributes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    attributes = dictionary;
                    continue;
                }
                if (prop.NameEquals("discoveryId"u8))
                {
                    discoveryId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    version = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DeviceRegistryProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DeviceRegistryNamespaceDiscoveredDeviceProperties(
                externalDeviceId,
                endpoints,
                manufacturer,
                model,
                operatingSystem,
                operatingSystemVersion,
                attributes ?? new ChangeTrackingDictionary<string, BinaryData>(),
                discoveryId,
                version,
                provisioningState,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDeviceRegistryContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DeviceRegistryNamespaceDiscoveredDeviceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeviceRegistryNamespaceDiscoveredDeviceProperties IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeviceRegistryNamespaceDiscoveredDeviceProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDeviceRegistryNamespaceDiscoveredDeviceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeviceRegistryNamespaceDiscoveredDeviceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DeviceRegistryNamespaceDiscoveredDeviceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
