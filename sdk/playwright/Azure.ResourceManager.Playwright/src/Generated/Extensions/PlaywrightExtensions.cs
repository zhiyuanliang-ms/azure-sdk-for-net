// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Playwright.Mocking;
using Azure.ResourceManager.Playwright.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Playwright. </summary>
    public static partial class PlaywrightExtensions
    {
        /// <param name="client"></param>
        private static MockablePlaywrightArmClient GetMockablePlaywrightArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockablePlaywrightArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockablePlaywrightResourceGroupResource GetMockablePlaywrightResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockablePlaywrightResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockablePlaywrightSubscriptionResource GetMockablePlaywrightSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockablePlaywrightSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="PlaywrightWorkspaceResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightWorkspaceResource"/> object. </returns>
        public static PlaywrightWorkspaceResource GetPlaywrightWorkspaceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightWorkspaceResource(id);
        }

        /// <summary> Gets an object representing a <see cref="PlaywrightQuotaResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightQuotaResource"/> object. </returns>
        public static PlaywrightQuotaResource GetPlaywrightQuotaResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightQuotaResource(id);
        }

        /// <summary> Gets an object representing a <see cref="PlaywrightWorkspaceQuotaResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightWorkspaceQuotaResource"/> object. </returns>
        public static PlaywrightWorkspaceQuotaResource GetPlaywrightWorkspaceQuotaResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightWorkspaceQuotaResource(id);
        }

        /// <summary> Gets a collection of PlaywrightWorkspaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of PlaywrightWorkspaces and their operations over a PlaywrightWorkspaceResource. </returns>
        public static PlaywrightWorkspaceCollection GetPlaywrightWorkspaces(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspaces();
        }

        /// <summary> Get a PlaywrightWorkspace. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PlaywrightWorkspaceResource>> GetPlaywrightWorkspaceAsync(this ResourceGroupResource resourceGroupResource, string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspaceAsync(playwrightWorkspaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a PlaywrightWorkspace. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PlaywrightWorkspaceResource> GetPlaywrightWorkspace(this ResourceGroupResource resourceGroupResource, string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspace(playwrightWorkspaceName, cancellationToken);
        }

        /// <summary> Gets a collection of PlaywrightQuotas in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="location"> The location for the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An object representing collection of PlaywrightQuotas and their operations over a PlaywrightQuotaResource. </returns>
        public static PlaywrightQuotaCollection GetAllPlaywrightQuota(this SubscriptionResource subscriptionResource, AzureLocation location)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetAllPlaywrightQuota(location);
        }

        /// <summary> Gets a subscription-level location-based Playwright quota resource by name. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PlaywrightQuotaResource>> GetPlaywrightQuotaAsync(this SubscriptionResource subscriptionResource, AzureLocation location, PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightQuotaAsync(location, playwrightQuotaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a subscription-level location-based Playwright quota resource by name. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PlaywrightQuotaResource> GetPlaywrightQuota(this SubscriptionResource subscriptionResource, AzureLocation location, PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightQuota(location, playwrightQuotaName, cancellationToken);
        }

        /// <summary> List PlaywrightWorkspace resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspacesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightWorkspacesAsync(cancellationToken);
        }

        /// <summary> List PlaywrightWorkspace resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspaces(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightWorkspaces(cancellationToken);
        }

        /// <summary> Checks if a Playwright workspace name is available globally. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        public static async Task<Response<PlaywrightNameAvailabilityResult>> CheckPlaywrightNameAvailabilityAsync(this SubscriptionResource subscriptionResource, PlaywrightNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockablePlaywrightSubscriptionResource(subscriptionResource).CheckPlaywrightNameAvailabilityAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Checks if a Playwright workspace name is available globally. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        public static Response<PlaywrightNameAvailabilityResult> CheckPlaywrightNameAvailability(this SubscriptionResource subscriptionResource, PlaywrightNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).CheckPlaywrightNameAvailability(content, cancellationToken);
        }
    }
}
