// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> Common api versions merge mode. </summary>
    public readonly partial struct CommonApiVersionsMergeMode : IEquatable<CommonApiVersionsMergeMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommonApiVersionsMergeMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommonApiVersionsMergeMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MergeValue = "Merge";
        private const string OverwriteValue = "Overwrite";

        /// <summary> Merge. </summary>
        public static CommonApiVersionsMergeMode Merge { get; } = new CommonApiVersionsMergeMode(MergeValue);
        /// <summary> Overwrite. </summary>
        public static CommonApiVersionsMergeMode Overwrite { get; } = new CommonApiVersionsMergeMode(OverwriteValue);
        /// <summary> Determines if two <see cref="CommonApiVersionsMergeMode"/> values are the same. </summary>
        public static bool operator ==(CommonApiVersionsMergeMode left, CommonApiVersionsMergeMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommonApiVersionsMergeMode"/> values are not the same. </summary>
        public static bool operator !=(CommonApiVersionsMergeMode left, CommonApiVersionsMergeMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CommonApiVersionsMergeMode"/>. </summary>
        public static implicit operator CommonApiVersionsMergeMode(string value) => new CommonApiVersionsMergeMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommonApiVersionsMergeMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommonApiVersionsMergeMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
